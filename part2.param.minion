MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 50
# CSE_active_eliminated_expressions = 170
# CSE_active_total_size = 500
**VARIABLES**
DISCRETE rows_00000 #
{0..1}
DISCRETE rows_00001 #
{0..1}
DISCRETE rows_00002 #
{0..1}
DISCRETE rows_00003 #
{0..1}
DISCRETE rows_00004 #
{0..1}
DISCRETE columns_00000 #
{0..1}
DISCRETE columns_00001 #
{0..1}
DISCRETE columns_00002 #
{0..1}
DISCRETE columns_00003 #
{0..1}
DISCRETE columns_00004 #
{0..1}
DISCRETE frontDiagonals_00000 #
{0..1}
DISCRETE frontDiagonals_00001 #
{0..1}
DISCRETE frontDiagonals_00002 #
{0..1}
DISCRETE frontDiagonals_00003 #
{0..1}
DISCRETE frontDiagonals_00004 #
{0..1}
DISCRETE frontDiagonals_00005 #
{0..1}
DISCRETE frontDiagonals_00006 #
{0..1}
DISCRETE frontDiagonals_00007 #
{0..1}
DISCRETE frontDiagonals_00008 #
{0..1}
DISCRETE aux11 #(rows_00000 + rows_00001 + rows_00002 + rows_00003 + rows_00004 + frontDiagonals_00000 + frontDiagonals_00001 + frontDiagonals_00002 + frontDiagonals_00003 + frontDiagonals_00004 + frontDiagonals_00005 + frontDiagonals_00006 + frontDiagonals_00007 + frontDiagonals_00008 + columns_00000 + columns_00001 + columns_00002 + columns_00003 + columns_00004)
{1..19}
BOOL aux12 #Active-CSE: 8 occurrences of this expression or equivalent: ((rows_00002 != 0) /\ (0 != columns_00002))
BOOL aux13 #Active-CSE: 4 occurrences of this expression or equivalent: ((rows_00002 != 0) /\ (0 != columns_00004))
BOOL aux14 #Active-CSE: 4 occurrences of this expression or equivalent: ((rows_00002 != 0) /\ (0 != columns_00000))
BOOL aux15 #Active-CSE: 4 occurrences of this expression or equivalent: ((rows_00001 != 0) /\ (0 != columns_00004))
BOOL aux16 #Active-CSE: 4 occurrences of this expression or equivalent: ((rows_00001 != 0) /\ (0 != columns_00000))
BOOL aux17 #Active-CSE: 4 occurrences of this expression or equivalent: ((rows_00000 != 0) /\ (0 != columns_00004))
BOOL aux18 #Active-CSE: 4 occurrences of this expression or equivalent: ((rows_00000 != 0) /\ (0 != columns_00002))
BOOL aux19 #Active-CSE: 4 occurrences of this expression or equivalent: ((rows_00000 != 0) /\ (0 != columns_00003))
BOOL aux20 #Active-CSE: 4 occurrences of this expression or equivalent: ((rows_00000 != 0) /\ (0 != columns_00000))
BOOL aux21 #Active-CSE: 4 occurrences of this expression or equivalent: ((rows_00000 != 0) /\ (0 != columns_00001))
BOOL aux22 #Active-CSE: 4 occurrences of this expression or equivalent: ((rows_00004 != 0) /\ (0 != columns_00003))
BOOL aux23 #Active-CSE: 4 occurrences of this expression or equivalent: ((rows_00004 != 0) /\ (0 != columns_00004))
BOOL aux24 #Active-CSE: 4 occurrences of this expression or equivalent: ((rows_00004 != 0) /\ (0 != columns_00001))
BOOL aux25 #Active-CSE: 4 occurrences of this expression or equivalent: ((rows_00004 != 0) /\ (0 != columns_00002))
BOOL aux26 #Active-CSE: 4 occurrences of this expression or equivalent: ((rows_00004 != 0) /\ (0 != columns_00000))
BOOL aux27 #Active-CSE: 4 occurrences of this expression or equivalent: ((rows_00003 != 0) /\ (0 != columns_00004))
BOOL aux28 #Active-CSE: 4 occurrences of this expression or equivalent: ((rows_00003 != 0) /\ (0 != columns_00000))
BOOL aux29 #Active-CSE: 6 occurrences of this expression or equivalent: ((rows_00002 != 0) /\ (0 != columns_00003))
BOOL aux30 #Active-CSE: 6 occurrences of this expression or equivalent: ((rows_00002 != 0) /\ (0 != columns_00001))
BOOL aux31 #Active-CSE: 6 occurrences of this expression or equivalent: ((rows_00003 != 0) /\ (0 != columns_00001))
BOOL aux32 #Active-CSE: 6 occurrences of this expression or equivalent: ((rows_00003 != 0) /\ (0 != columns_00003))
BOOL aux33 #Active-CSE: 6 occurrences of this expression or equivalent: ((rows_00003 != 0) /\ (0 != columns_00002))
BOOL aux34 #Active-CSE: 6 occurrences of this expression or equivalent: ((rows_00001 != 0) /\ (0 != columns_00003))
BOOL aux35 #Active-CSE: 6 occurrences of this expression or equivalent: ((rows_00001 != 0) /\ (0 != columns_00002))
BOOL aux36 #Active-CSE: 6 occurrences of this expression or equivalent: ((rows_00001 != 0) /\ (0 != columns_00001))
BOOL aux37 #Active-CSE: 2 occurrences of this expression or equivalent: (rows_00003 * columns_00004)
BOOL aux38 #Active-CSE: 2 occurrences of this expression or equivalent: (rows_00003 * columns_00003)
BOOL aux39 #Active-CSE: 2 occurrences of this expression or equivalent: (rows_00003 * columns_00002)
BOOL aux40 #Active-CSE: 2 occurrences of this expression or equivalent: (rows_00003 * columns_00001)
BOOL aux41 #Active-CSE: 2 occurrences of this expression or equivalent: (rows_00003 * columns_00000)
BOOL aux42 #Active-CSE: 2 occurrences of this expression or equivalent: (rows_00004 * columns_00003)
BOOL aux43 #Active-CSE: 2 occurrences of this expression or equivalent: (rows_00004 * columns_00004)
BOOL aux44 #Active-CSE: 2 occurrences of this expression or equivalent: (rows_00004 * columns_00000)
BOOL aux45 #Active-CSE: 2 occurrences of this expression or equivalent: (rows_00004 * columns_00001)
BOOL aux46 #Active-CSE: 2 occurrences of this expression or equivalent: (rows_00004 * columns_00002)
BOOL aux47 #Active-CSE: 2 occurrences of this expression or equivalent: (rows_00001 * columns_00001)
BOOL aux48 #Active-CSE: 2 occurrences of this expression or equivalent: (rows_00001 * columns_00000)
BOOL aux49 #Active-CSE: 2 occurrences of this expression or equivalent: (rows_00001 * columns_00003)
BOOL aux50 #Active-CSE: 2 occurrences of this expression or equivalent: (rows_00001 * columns_00002)
BOOL aux51 #Active-CSE: 2 occurrences of this expression or equivalent: (rows_00001 * columns_00004)
BOOL aux52 #Active-CSE: 2 occurrences of this expression or equivalent: (rows_00002 * columns_00003)
BOOL aux53 #Active-CSE: 2 occurrences of this expression or equivalent: (rows_00002 * columns_00004)
BOOL aux54 #Active-CSE: 2 occurrences of this expression or equivalent: (rows_00002 * columns_00001)
BOOL aux55 #Active-CSE: 2 occurrences of this expression or equivalent: (rows_00002 * columns_00002)
BOOL aux56 #Active-CSE: 2 occurrences of this expression or equivalent: (rows_00002 * columns_00000)
BOOL aux57 #Active-CSE: 2 occurrences of this expression or equivalent: (rows_00000 * columns_00000)
BOOL aux58 #Active-CSE: 2 occurrences of this expression or equivalent: (rows_00000 * columns_00001)
BOOL aux59 #Active-CSE: 2 occurrences of this expression or equivalent: (rows_00000 * columns_00002)
BOOL aux60 #Active-CSE: 2 occurrences of this expression or equivalent: (rows_00000 * columns_00003)
BOOL aux61 #Active-CSE: 2 occurrences of this expression or equivalent: (rows_00000 * columns_00004)
BOOL aux62 #(aux19 \/ aux29 \/ aux33 \/ aux24)
BOOL aux63 #(aux20 \/ aux18 \/ aux14 \/ aux12 \/ aux32 \/ aux23)
BOOL aux64 #(aux21 \/ aux19 \/ aux30 \/ aux29 \/ aux28 \/ aux27)
BOOL aux65 #(aux18 \/ aux17 \/ aux12 \/ aux13 \/ aux31 \/ aux26)
BOOL aux66 #(aux36 \/ aux12 \/ aux32 \/ aux23)
BOOL aux67 #(aux20 \/ aux36 \/ aux12 \/ aux13 \/ aux25 \/ aux23)
BOOL aux68 #(aux21 \/ aux35 \/ aux15 \/ aux33 \/ aux27 \/ aux24)
BOOL aux69 #(aux19 \/ aux16 \/ aux35 \/ aux28 \/ aux33 \/ aux22)
BOOL aux70 #(aux17 \/ aux34 \/ aux14 \/ aux12 \/ aux26 \/ aux25)
BOOL aux71 #(aux16 \/ aux35 \/ aux29 \/ aux27)
BOOL aux72 #(aux18 \/ aux36 \/ aux31 \/ aux25)
BOOL aux73 #(aux19 \/ aux35 \/ aux30 \/ aux24)
BOOL aux74 #(aux18 \/ aux34 \/ aux32 \/ aux25)
BOOL aux75 #(aux20 \/ aux17 \/ aux36 \/ aux34 \/ aux31 \/ aux32 \/ aux26 \/ aux23)
BOOL aux76 #(aux14 \/ aux13 \/ aux31 \/ aux32)
BOOL aux77 #(aux36 \/ aux34 \/ aux14 \/ aux13)
BOOL aux78 #(aux34 \/ aux12 \/ aux31 \/ aux26)
BOOL aux79 #(aux21 \/ aux30 \/ aux33 \/ aux22)
BOOL aux80 #(aux17 \/ aux34 \/ aux12 \/ aux31)
BOOL aux81 #(aux16 \/ aux15 \/ aux30 \/ aux29 \/ aux24 \/ aux22)
BOOL aux82 #(aux20 \/ aux36 \/ aux12 \/ aux32)
BOOL aux83 #(aux35 \/ aux15 \/ aux30 \/ aux28)
BOOL aux84 #(aux15 \/ aux29 \/ aux28 \/ aux33)
BOOL aux86 #(aux16 \/ aux30 \/ aux33 \/ aux27)
BOOL aux87 #(aux21 \/ aux35 \/ aux29 \/ aux22)
**SEARCH**
PRINT[[rows_00000],[rows_00001],[rows_00002],[rows_00003],[rows_00004],[columns_00000],[columns_00001],[columns_00002],[columns_00003],[columns_00004],[frontDiagonals_00000],[frontDiagonals_00001],[frontDiagonals_00002],[frontDiagonals_00003],[frontDiagonals_00004],[frontDiagonals_00005],[frontDiagonals_00006],[frontDiagonals_00007],[frontDiagonals_00008][aux11]]
MINIMISING aux11
VARORDER STATIC [rows_00000, rows_00001, rows_00002, rows_00003, rows_00004, columns_00000, columns_00001, columns_00002, columns_00003, columns_00004, frontDiagonals_00000, frontDiagonals_00001, frontDiagonals_00002, frontDiagonals_00003, frontDiagonals_00004, frontDiagonals_00005, frontDiagonals_00006, frontDiagonals_00007, frontDiagonals_00008]
VARORDER AUX [rows_00000,rows_00001,rows_00002,rows_00003,rows_00004,columns_00000,columns_00001,columns_00002,columns_00003,columns_00004,frontDiagonals_00000,frontDiagonals_00001,frontDiagonals_00002,frontDiagonals_00003,frontDiagonals_00004,frontDiagonals_00005,frontDiagonals_00006,frontDiagonals_00007,frontDiagonals_00008,aux11,aux12,aux13,aux14,aux15,aux16,aux17,aux18,aux19,aux20,aux21,aux22,aux23,aux24,aux25,aux26,aux27,aux28,aux29,aux30,aux31,aux32,aux33,aux34,aux35,aux36,aux37,aux38,aux39,aux40,aux41,aux42,aux43,aux44,aux45,aux46,aux47,aux48,aux49,aux50,aux51,aux52,aux53,aux54,aux55,aux56,aux57,aux58,aux59,aux60,aux61,aux62,aux63,aux64,aux65,aux66,aux67,aux68,aux69,aux70,aux71,aux72,aux73,aux74,aux75,aux76,aux77,aux78,aux79,aux80,aux81,aux82,aux83,aux84,aux86,aux87]
**CONSTRAINTS**
reify(watched-or({w-literal(aux19,1),w-literal(aux29,1),w-literal(aux33,1),w-literal(aux24,1)}), aux62)
reify(watched-or({w-literal(aux20,1),w-literal(aux18,1),w-literal(aux14,1),w-literal(aux12,1),w-literal(aux32,1),w-literal(aux23,1)}), aux63)
reify(watched-or({w-literal(aux21,1),w-literal(aux19,1),w-literal(aux30,1),w-literal(aux29,1),w-literal(aux28,1),w-literal(aux27,1)}), aux64)
reify(watched-or({w-literal(aux18,1),w-literal(aux17,1),w-literal(aux12,1),w-literal(aux13,1),w-literal(aux31,1),w-literal(aux26,1)}), aux65)
reify(watched-or({w-literal(aux36,1),w-literal(aux12,1),w-literal(aux32,1),w-literal(aux23,1)}), aux66)
reify(watched-or({w-literal(aux20,1),w-literal(aux36,1),w-literal(aux12,1),w-literal(aux13,1),w-literal(aux25,1),w-literal(aux23,1)}), aux67)
reify(watched-or({w-literal(aux21,1),w-literal(aux35,1),w-literal(aux15,1),w-literal(aux33,1),w-literal(aux27,1),w-literal(aux24,1)}), aux68)
reify(watched-or({w-literal(aux19,1),w-literal(aux16,1),w-literal(aux35,1),w-literal(aux28,1),w-literal(aux33,1),w-literal(aux22,1)}), aux69)
reify(watched-or({w-literal(aux17,1),w-literal(aux34,1),w-literal(aux14,1),w-literal(aux12,1),w-literal(aux26,1),w-literal(aux25,1)}), aux70)
reify(watched-or({w-literal(aux16,1),w-literal(aux35,1),w-literal(aux29,1),w-literal(aux27,1)}), aux71)
reify(watched-or({w-literal(aux18,1),w-literal(aux36,1),w-literal(aux31,1),w-literal(aux25,1)}), aux72)
reify(watched-or({w-literal(aux19,1),w-literal(aux35,1),w-literal(aux30,1),w-literal(aux24,1)}), aux73)
reify(watched-or({w-literal(aux18,1),w-literal(aux34,1),w-literal(aux32,1),w-literal(aux25,1)}), aux74)
reify(watched-or({w-literal(aux20,1),w-literal(aux17,1),w-literal(aux36,1),w-literal(aux34,1),w-literal(aux31,1),w-literal(aux32,1),w-literal(aux26,1),w-literal(aux23,1)}), aux75)
reify(watched-or({w-literal(aux14,1),w-literal(aux13,1),w-literal(aux31,1),w-literal(aux32,1)}), aux76)
reify(watched-or({w-literal(aux36,1),w-literal(aux34,1),w-literal(aux14,1),w-literal(aux13,1)}), aux77)
reify(watched-or({w-literal(aux34,1),w-literal(aux12,1),w-literal(aux31,1),w-literal(aux26,1)}), aux78)
reify(watched-or({w-literal(aux21,1),w-literal(aux30,1),w-literal(aux33,1),w-literal(aux22,1)}), aux79)
reify(watched-or({w-literal(aux17,1),w-literal(aux34,1),w-literal(aux12,1),w-literal(aux31,1)}), aux80)
reify(watched-or({w-literal(aux16,1),w-literal(aux15,1),w-literal(aux30,1),w-literal(aux29,1),w-literal(aux24,1),w-literal(aux22,1)}), aux81)
reify(watched-or({w-literal(aux20,1),w-literal(aux36,1),w-literal(aux12,1),w-literal(aux32,1)}), aux82)
reify(watched-or({w-literal(aux35,1),w-literal(aux15,1),w-literal(aux30,1),w-literal(aux28,1)}), aux83)
reify(watched-or({w-literal(aux15,1),w-literal(aux29,1),w-literal(aux28,1),w-literal(aux33,1)}), aux84)
reify(watched-or({w-literal(aux16,1),w-literal(aux30,1),w-literal(aux33,1),w-literal(aux27,1)}), aux86)
reify(watched-or({w-literal(aux21,1),w-literal(aux35,1),w-literal(aux29,1),w-literal(aux22,1)}), aux87)
reify(watched-and({diseq(rows_00002,0),diseq(0,columns_00002)}), aux12)
reify(watched-and({diseq(rows_00002,0),diseq(0,columns_00004)}), aux13)
reify(watched-and({diseq(rows_00002,0),diseq(0,columns_00000)}), aux14)
reify(watched-and({diseq(rows_00001,0),diseq(0,columns_00004)}), aux15)
reify(watched-and({diseq(rows_00001,0),diseq(0,columns_00000)}), aux16)
reify(watched-and({diseq(rows_00000,0),diseq(0,columns_00004)}), aux17)
reify(watched-and({diseq(rows_00000,0),diseq(0,columns_00002)}), aux18)
reify(watched-and({diseq(rows_00000,0),diseq(0,columns_00003)}), aux19)
reify(watched-and({diseq(rows_00000,0),diseq(0,columns_00000)}), aux20)
reify(watched-and({diseq(rows_00000,0),diseq(0,columns_00001)}), aux21)
reify(watched-and({diseq(rows_00004,0),diseq(0,columns_00003)}), aux22)
reify(watched-and({diseq(rows_00004,0),diseq(0,columns_00004)}), aux23)
reify(watched-and({diseq(rows_00004,0),diseq(0,columns_00001)}), aux24)
reify(watched-and({diseq(rows_00004,0),diseq(0,columns_00002)}), aux25)
reify(watched-and({diseq(rows_00004,0),diseq(0,columns_00000)}), aux26)
reify(watched-and({diseq(rows_00003,0),diseq(0,columns_00004)}), aux27)
reify(watched-and({diseq(rows_00003,0),diseq(0,columns_00000)}), aux28)
reify(watched-and({diseq(rows_00002,0),diseq(0,columns_00003)}), aux29)
reify(watched-and({diseq(rows_00002,0),diseq(0,columns_00001)}), aux30)
reify(watched-and({diseq(rows_00003,0),diseq(0,columns_00001)}), aux31)
reify(watched-and({diseq(rows_00003,0),diseq(0,columns_00003)}), aux32)
reify(watched-and({diseq(rows_00003,0),diseq(0,columns_00002)}), aux33)
reify(watched-and({diseq(rows_00001,0),diseq(0,columns_00003)}), aux34)
reify(watched-and({diseq(rows_00001,0),diseq(0,columns_00002)}), aux35)
reify(watched-and({diseq(rows_00001,0),diseq(0,columns_00001)}), aux36)
product(rows_00003, columns_00004, aux37)
product(rows_00003, columns_00003, aux38)
product(rows_00003, columns_00002, aux39)
product(rows_00003, columns_00001, aux40)
product(rows_00003, columns_00000, aux41)
product(rows_00004, columns_00003, aux42)
product(rows_00004, columns_00004, aux43)
product(rows_00004, columns_00000, aux44)
product(rows_00004, columns_00001, aux45)
product(rows_00004, columns_00002, aux46)
product(rows_00001, columns_00001, aux47)
product(rows_00001, columns_00000, aux48)
product(rows_00001, columns_00003, aux49)
product(rows_00001, columns_00002, aux50)
product(rows_00001, columns_00004, aux51)
product(rows_00002, columns_00003, aux52)
product(rows_00002, columns_00004, aux53)
product(rows_00002, columns_00001, aux54)
product(rows_00002, columns_00002, aux55)
product(rows_00002, columns_00000, aux56)
product(rows_00000, columns_00000, aux57)
product(rows_00000, columns_00001, aux58)
product(rows_00000, columns_00002, aux59)
product(rows_00000, columns_00003, aux60)
product(rows_00000, columns_00004, aux61)
sumgeq([aux62,rows_00001,frontDiagonals_00005,columns_00004],1)
sumgeq([rows_00001,frontDiagonals_00002,columns_00001,aux63],1)
sumgeq([rows_00001,frontDiagonals_00003,columns_00002,aux64],1)
sumgeq([rows_00001,frontDiagonals_00004,columns_00003,aux65],1)
sumgeq([aux66,rows_00000,frontDiagonals_00000,columns_00000],1)
ineq(aux57, frontDiagonals_00000, 0)
ineq(aux58, frontDiagonals_00001, 0)
ineq(aux59, frontDiagonals_00002, 0)
ineq(aux60, frontDiagonals_00003, 0)
ineq(aux61, frontDiagonals_00004, 0)
ineq(aux48, frontDiagonals_00001, 0)
ineq(aux47, frontDiagonals_00002, 0)
ineq(aux50, frontDiagonals_00003, 0)
ineq(aux49, frontDiagonals_00004, 0)
ineq(aux51, frontDiagonals_00005, 0)
ineq(aux56, frontDiagonals_00002, 0)
ineq(aux54, frontDiagonals_00003, 0)
ineq(aux55, frontDiagonals_00004, 0)
ineq(aux52, frontDiagonals_00005, 0)
ineq(aux53, frontDiagonals_00006, 0)
ineq(aux41, frontDiagonals_00003, 0)
ineq(aux40, frontDiagonals_00004, 0)
ineq(aux39, frontDiagonals_00005, 0)
ineq(aux38, frontDiagonals_00006, 0)
ineq(aux37, frontDiagonals_00007, 0)
ineq(aux44, frontDiagonals_00004, 0)
ineq(aux45, frontDiagonals_00005, 0)
ineq(aux46, frontDiagonals_00006, 0)
ineq(aux42, frontDiagonals_00007, 0)
ineq(aux43, frontDiagonals_00008, 0)
sumgeq([rows_00003,frontDiagonals_00006,columns_00003,aux67],1)
sumgeq([rows_00002,frontDiagonals_00005,columns_00003,aux68],1)
sumgeq([rows_00002,frontDiagonals_00003,columns_00001,aux69],1)
sumgeq([rows_00003,frontDiagonals_00004,columns_00001,aux70],1)
sumgeq([aux71,rows_00000,frontDiagonals_00001,columns_00001],1)
watched-or({w-literal(frontDiagonals_00004,0),w-literal(aux61,1),w-literal(aux49,1),w-literal(aux55,1),w-literal(aux40,1),w-literal(aux44,1)})
sumgeq([aux72,rows_00002,frontDiagonals_00002,columns_00000],1)
sumgeq([aux73,rows_00003,frontDiagonals_00003,columns_00000],1)
sumgeq([aux74,rows_00002,frontDiagonals_00006,columns_00004],1)
sumgeq([aux75,rows_00002,frontDiagonals_00004,columns_00002],1)
sumgeq([aux76,rows_00004,frontDiagonals_00006,columns_00002],1)
sumgeq([aux77,rows_00000,frontDiagonals_00002,columns_00002],1)
sumgeq([aux78,rows_00000,frontDiagonals_00004,columns_00004],1)
sumgeq([aux79,rows_00001,frontDiagonals_00001,columns_00000],1)
sumgeq([aux80,rows_00004,frontDiagonals_00004,columns_00000],1)
watched-or({w-literal(frontDiagonals_00003,0),w-literal(aux60,1),w-literal(aux50,1),w-literal(aux54,1),w-literal(aux41,1)})
watched-or({w-literal(frontDiagonals_00005,0),w-literal(aux51,1),w-literal(aux52,1),w-literal(aux39,1),w-literal(aux45,1)})
sumgeq([rows_00003,aux81,frontDiagonals_00005,columns_00002],1)
watched-or({w-literal(frontDiagonals_00000,0),w-literal(aux57,1)})
watched-or({w-literal(frontDiagonals_00008,0),w-literal(aux43,1)})
watched-or({w-literal(frontDiagonals_00001,0),w-literal(aux58,1),w-literal(aux48,1)})
watched-or({w-literal(frontDiagonals_00007,0),w-literal(aux37,1),w-literal(aux42,1)})
sumgeq([aux82,rows_00004,frontDiagonals_00008,columns_00004],1)
sumgeq([aux83,rows_00000,frontDiagonals_00003,columns_00003],1)
sumgeq([aux84,rows_00004,frontDiagonals_00005,columns_00001],1)
watched-or({w-literal(frontDiagonals_00002,0),w-literal(aux59,1),w-literal(aux47,1),w-literal(aux56,1)})
watched-or({w-literal(frontDiagonals_00006,0),w-literal(aux53,1),w-literal(aux38,1),w-literal(aux46,1)})
sumgeq([aux86,rows_00004,frontDiagonals_00007,columns_00003],1)
sumgeq([aux87,rows_00003,frontDiagonals_00007,columns_00004],1)
weightedsumleq([1,1,1,1,1,-1,-1,-1,-1,-1],[rows_00000,rows_00001,rows_00002,rows_00003,rows_00004,columns_00000,columns_00001,columns_00002,columns_00003,columns_00004],0)
weightedsumgeq([1,1,1,1,1,-1,-1,-1,-1,-1],[rows_00000,rows_00001,rows_00002,rows_00003,rows_00004,columns_00000,columns_00001,columns_00002,columns_00003,columns_00004],0)
sumleq([rows_00000,rows_00001,rows_00002,rows_00003,rows_00004,frontDiagonals_00000,frontDiagonals_00001,frontDiagonals_00002,frontDiagonals_00003,frontDiagonals_00004,frontDiagonals_00005,frontDiagonals_00006,frontDiagonals_00007,frontDiagonals_00008,columns_00000,columns_00001,columns_00002,columns_00003,columns_00004],aux11)
sumgeq([rows_00000,rows_00001,rows_00002,rows_00003,rows_00004,frontDiagonals_00000,frontDiagonals_00001,frontDiagonals_00002,frontDiagonals_00003,frontDiagonals_00004,frontDiagonals_00005,frontDiagonals_00006,frontDiagonals_00007,frontDiagonals_00008,columns_00000,columns_00001,columns_00002,columns_00003,columns_00004],aux11)
**EOF**
