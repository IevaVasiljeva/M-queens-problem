language ESSENCE' 1.0

given BOARD_SIZE : int

letting RANGE be domain int(1..BOARD_SIZE)

find result : matrix indexed by [RANGE, RANGE] of int(0,1)

minimising sum(flatten(result))

such that

$ queens do not attack each other - max one in each row, column and diagonal
forAll row : RANGE . sum(result[row,..]) <= 1,
forAll col : RANGE . sum(result[..,col]) <= 1,

$ constraints for top / diagonals and bottom \
forAll row : RANGE .
	((sum col : int(1..row) . result[row-col+1,col]) <= 1) /\
	((sum col2 : int(1..BOARD_SIZE-row+1) . result[row+col2-1,col2]) <= 1),

$ constraints for top \ diagonals and bottom /
forAll col : RANGE .
	((sum row : int(1..BOARD_SIZE-col+1) . result[row,row+col-1]) <= 1) /\
	((sum row2 : int(col..BOARD_SIZE) . result[row2,BOARD_SIZE-row2+col]) <= 1),

$ all fields must be under attack
forAll row : RANGE .
	forAll col : RANGE .
		(sum(result[row,..]) + sum(result[..,col]) + (sum  row2,col2 : RANGE . (exists delta : int(1.. BOARD_SIZE -1) . (((row2 = row + delta) \/ (row2 = row - delta)) /\ ((col2 = col + delta) \/ (col2 = col - delta)))) * result[row2,col2])) >= 1