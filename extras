forAll row : RANGE .
	((sum col : int(1..row) . result[row-col+1,col]) <= 1) /\
	((sum col2 : int(1..BOARD_SIZE-row+1) . result[row+col2-1,col2]) <= 1)

forAll col : RANGE .
	((sum row : int(1..BOARD_SIZE-col+1) . result[row,row+col-1]) <= 1) /\
	((sum ))



letting NUM_OF_QUEENS = sum row,col : RANGE . result[row,col],

minimising NUM_OF_QUEENS




forAll row : RANGE .
	((sum col : int(1..row) . result[row-col+1,col]) <= 1) /\
	((sum col2 : int(1..BOARD_SIZE-row+1) . result[row+col2-1,col2]) <= 1),

forAll col : RANGE .
	((sum row : int(1..BOARD_SIZE-col+1) . result[row,row+col-1]) <= 1) /\
	((sum row2 : int(col..BOARD_SIZE-col+1) . result[row2,BOARD_SIZE-row2+1]) <= 1),



	(sum  row2,col2 : RANGE . (row2 + col2 = row + col) * result[row2,col2]) + 



	$ constraints for diagonals
forAll col : RANGE .
	(result[col] = 0) \/
	(forAll col2 : int(col..BOARD_SIZE) .
		(result[col2] = 0) \/
		(!(exists delta : int(1.. BOARD_SIZE -1) . (((result[col] = result[col2] + delta) \/ (result[col] = result[col2] - delta))) /\ ((col2 = col + delta) \/ (col2 = col - delta))))),


$ constraints for / diagonals
forAll diagSums : int(2..2*BOARD_SIZE) .
	(sum col : RANGE . (col + result[col])*(result[col] != 0) = diagSums) <= 1,


allDiff([col + result[col] | col : RANGE])


$ constraints for / diagonals
forAll col : RANGE .
	(result[col] = 0) \/ (forAll col2 : int(1..col) . (col2 - col) != (result[col] - result[col2])),



	forAll DiagSum : int(2..BOARD_SIZE*2) .
	sum([result[row,col] | row,col : RANGE, row + col = DiagSum]) <= 1,

$ Constraints for the number of queens in top / diagonals and bottom \ ones.
forAll row : RANGE .
	(sum col : int(1..row) . result[row-col+1,col]) <= 1,

forAll row : RANGE .
	(sum col : int(1..BOARD_SIZE-row+1) . result[row+col-1,col]) <= 1,

$ constraints for top \ diagonals and bottom /
forAll col : RANGE .
	((sum row : int(1..BOARD_SIZE-col+1) . result[row,row+col-1]) <= 1) /\
	((sum row2 : int(col..BOARD_SIZE) . result[row2,BOARD_SIZE-row2+col]) <= 1),


	forAll DiagSum : int(2..BOARD_SIZE*2) .
	sum([result[row,col] | row,col : RANGE, row + col = DiagSum]) <= 1,



(sum row : int(1..BOARD_SIZE/2) . sum(result[row,..])) <= (sum row : int((BOARD_SIZE+2)/2..BOARD_SIZE) . sum(result[row,..])),

(sum col : int(1..BOARD_SIZE/2) . sum(result[..,col])) <= (sum col : int((BOARD_SIZE+2)/2..BOARD_SIZE) . sum(result[..,col])),



		(sum(result[row,..]) + sum(result[..,col]) + (sum  row2,col2 : RANGE . result[row2,col2]*(exists delta : int(1.. BOARD_SIZE -1) . (((row2 = row + delta) \/ (row2 = row - delta)) /\ ((col2 = col + delta) \/ (col2 = col - delta)))))) >= 1


				(sum(result[row,..]) + sum(result[..,col]) + (exists  row2,col2 : RANGE . (result[row2,col2] != 0) /\ (|row2 - row| = |col2 - col|))) >= 1
				vs 
				(sum(result[row,..]) + sum(result[..,col]) + (sum  row2,col2 : RANGE . (result[row2,col2] != 0) /\ (|row2 - row| = |col2 - col|))) >= 1
				vs
				(sum(result[row,..]) + sum(result[..,col]) + (sum  row2,col2 : RANGE . result[row2,col2] * (|row2 - row| = |col2 - col|))) >= 1

$ Minion SolverNodes: 122319
$ Minion SolverTotalTime: 7.16249
$ Minion SolverTimeOut: 0
$ Savile Row TotalTime: 0.901

vs

$ Minion SolverNodes: 122319
$ Minion SolverTotalTime: 3.42143
$ Minion SolverTimeOut: 0
$ Savile Row TotalTime: 0.945

vs

$ Minion SolverNodes: 122222
$ Minion SolverTotalTime: 5.27286
$ Minion SolverTimeOut: 0
$ Savile Row TotalTime: 0.684
