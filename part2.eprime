language ESSENCE' 1.0

given BOARD_SIZE : int

letting RANGE be domain int(1..BOARD_SIZE)

find result : matrix indexed by [RANGE] of int(0..BOARD_SIZE)

minimising sum col : RANGE . (result[col] != 0)

such that

$ queens do not attack each other - one queen per column by design, imply row constraints here
alldifferent_except(result,0),

$ Constraints for / diagonals. Slice the elements whose row index + column index = the same number, as these represent the / diagonal
allDiff([col + result[col] | col : RANGE]),

$ constraints for \ diagonals
forAll col : int(1..BOARD_SIZE-1) .
	forAll col2 : int(col+1..BOARD_SIZE) . ((col2 - col) != (result[col2] - result[col])),

$ all fields must be under attack
forAll col : RANGE .
	forAll row : RANGE .
		((result[col] != 0) + (sum col2 : RANGE . (row = result[col2])) + 
			(exists col2 : RANGE .
				exists delta : int(1..BOARD_SIZE-1) . ((result[col2] != 0) /\ ((row = result[col2] + delta) \/ (row = result[col2] - delta))) /\ ((col = col2 + delta) \/ (col = col2 - delta)))) >= 1